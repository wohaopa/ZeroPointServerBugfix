
name: Release tagged build

on:
  push:
    tags: [ '*' ]

permissions:
  contents: write

jobs:
  release-tags:
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ github.ref_name }}
      RELEASE_VERSION: ${{ github.ref_name }}
      SNAPSHOT: ${{ endsWith(github.ref_name, '-snapshot') || contains(github.event.head_commit.message, '[snapshot]') }}
    steps:
      - name: Checkout mod repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Validate gradle wrapper checksum
        uses: gradle/wrapper-validation-action@v2

      - name: Set up JDK versions
        uses: actions/setup-java@v4
        with:
          java-version: |
            8
            21
            17
          distribution: 'zulu'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Setup the workspace
        run: ./gradlew --build-cache --info --stacktrace setupCIWorkspace

      - name: Build the mod
        run: ./gradlew --build-cache --info --stacktrace assemble

      # Continue on error in the following steps to make sure releases still get made even if one of the methods fails

      - name: Delete old release if it already exists
        run: gh release delete --yes "${RELEASE_VERSION}"
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign the jar
        run: |
          echo $CERTIFICATE_BASE64 | base64 --decode > ZeroPointBugfix.jks
          for file in ./build/libs/*.jar; do
            if [ -f "$file" ]; then
              echo "Encrypting $file..."
              jarsigner -verbose -keystore ZeroPointBugfix.jks -storepass CERTIFICATE_PASSWORD $file ZeroPointBugfix
            fi
          done
        shell: bash
        continue-on-error: true
        env:
          CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_BASE64 }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
        if: ${{ secrets.CERTIFICATE_BASE64 != '' && secrets.CERTIFICATE_PASSWORD != '' }}

      - name: Release under current tag
        run: |
          PRERELEASE=""
          if [[ "$SNAPSHOT" == "true" ]]; then
            PRERELEASE="--prerelease"
          fi
          export "CHANGELOG_FILE=$(mktemp --suffix=.md)"
          echo "CHANGELOG_FILE=${CHANGELOG_FILE}" >> $GITHUB_ENV
          gh api --method POST -H "Accept: application/vnd.github+json" \
            "/repos/${GITHUB_REPOSITORY}/releases/generate-notes" \
            -f tag_name="${RELEASE_VERSION}" \
            --jq ".body" > "${CHANGELOG_FILE}"
          cat "${CHANGELOG_FILE}"
          gh release create "${RELEASE_VERSION}" -F "${CHANGELOG_FILE}" $PRERELEASE ./build/libs/*.jar
        shell: bash
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
